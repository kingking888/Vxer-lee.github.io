{"meta":{"title":"Lee'Blog 专注逆向、网络安全","subtitle":"专注逆向、网络安全","description":"你迷茫的原因只有一个 想太多 做太少","author":"Lee","url":"https://vxer-lee.github.io","root":"/"},"pages":[{"title":"关于我","date":"2020-01-04T13:19:13.000Z","updated":"2020-01-06T14:33:59.338Z","comments":true,"path":"about/index.html","permalink":"https://vxer-lee.github.io/about/index.html","excerpt":"","text":"1Lee . π &amp; ptu Team 成员之一,擅长逆向、渗透。"},{"title":"iOS13 动态调试配置之xia0LLDB","date":"2020-04-19T12:54:41.842Z","updated":"2020-04-19T12:54:33.897Z","comments":true,"path":"re/Untitled.html","permalink":"https://vxer-lee.github.io/re/Untitled.html","excerpt":"","text":""},{"title":"Sugram聊天数据库解密","date":"2020-02-11T13:50:10.000Z","updated":"2020-02-11T13:50:10.165Z","comments":true,"path":"re/Sugram聊天数据库解密.html","permalink":"https://vxer-lee.github.io/re/Sugram%E8%81%8A%E5%A4%A9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86.html","excerpt":"","text":""},{"title":"re","date":"2020-04-06T03:18:53.000Z","updated":"2020-04-06T03:18:53.561Z","comments":true,"path":"re/index.html","permalink":"https://vxer-lee.github.io/re/index.html","excerpt":"","text":""},{"title":"iOS13 动态调试配置之debugserver","date":"2020-02-06T09:30:34.000Z","updated":"2020-02-06T12:51:27.828Z","comments":true,"path":"re/iOS13-动态调试配置之debugserver.html","permalink":"https://vxer-lee.github.io/re/iOS13-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE%E4%B9%8Bdebugserver.html","excerpt":"","text":"疫情期间家里没网🤣，好久没更新了，刚回到杭州给自己iOS逆向充充电。[武汉加油💪] iOS逆向里面比较重要的几项技能：动态调试、静态分析、HOOK关键函数、重签名 先来讲下动态调试，iOS动态调试需要一个服务端和客户端程序，服务端程序在手机上监听要动态调试程序的进程ID或是程序名，客户端程序在Mac OS系统上运行。 123服务端程序:debugserver客户端程序:lldb#这两个程序不用额外的去外网下载，只要你的Mac电脑有装XCode，并且进行真机调试过（真机调试一般可以在淘宝买UDID开发者证书，就是和你手机UDID绑定的证书那么你就可以在你手机上安装开发你的APP|土豪（开发者账号）） 只要你手机进行真机调试过，那么在你手机的这个目录下就会有debugserver 12/Developer/usr/bin/debugserver#不过这个debugserver 默认只能调试自己开发的APP，我们逆向当然是要逆别人的程序，所以想要debugserver能调试三方APP，需要进行一些修改，下面就是修改的一些重点。 #0x00 配置debugserver 赋予权限debugserver默认只能调试自己开发的应用，调试其他应用会抛异常unable to start the exception thread。默认的debugserver缺少task_for_pid()权限，因此需要给debugserver赋予task_for_pid权限。——这是网上摘抄的话 我发现网上配置debugserver的方法已经过时，不适用iOS13系统，导致debugserver还是无法调试三方APP，所以按照如下方法进行。 1、 新建一个文件名为ent.xml 1234567891011121314151617181920212223242526272829303132&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt;&lt;dict&gt; &lt;key&gt;com.apple.backboardd.debugapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.backboardd.launchapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.diagnosticd.diagnostic&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.frontboard.debugapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.frontboard.launchapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.security.network.client&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.security.network.server&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.springboard.debugapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.system-task-ports&lt;/key&gt; &lt;true/&gt; &lt;key&gt;get-task-allow&lt;/key&gt; &lt;true/&gt; &lt;key&gt;platform-application&lt;/key&gt; &lt;true/&gt; &lt;key&gt;run-unsigned-code&lt;/key&gt; &lt;true/&gt; &lt;key&gt;task_for_pid-allow&lt;/key&gt; &lt;true/&gt;&lt;/dict&gt;&lt;/plist&gt; 2、用ldid对debugserver签名 赋予权限 12ldid -Sxml全路径 debugserver全路径`例如：`ldid -Sent.xml debugserver 这里要SSH连入iPhone手机执行命令：需要越狱您的iPhone,不会的请去看 疯先生越狱 123456789101112131415161718#开启端口转发,数据线连SSHiproxy 2222 44 #默认用Checkra1n越狱的端口号为44，其余的默认为22#连入iPhone SSHssh root@localhost -p 2222 #iPhone默认ssh密码,alpine#切换到debugserver存在的目录iPhone:~ root# cd /Developer/usr/bin/iPhone:/Developer/usr/bin root# lsDTDeviceArbitration* ScreenShotr* axauditd* debugserver*#新建ent.xml文件iPhone:/Developer/usr/bin root# vim ent.xml #将1、里面的ent.xml内容复制进去，并且保存#最后ldid赋予权限iPhone:/Developer/usr/bin root# ldid -Sent.xml debugserver#拷贝到系统目录iPhone:/Developer/usr/bin root# copy ./debugserver /usr/bin #0x01 验证debugserver 进行动态调试配置好iPhone端的debugserver后，就可以在Mac电脑上用lldb远程进行动态调试了lldb调试大全后续会讲，此次注重debugserver的配置，lldb一笔带，只要知道lldb是Mac上的客户端用来动态调试。 以调试Sugram 聊天软件为例 手机端： 123456#查看Sugram的进程IDiPhone:~ root# ps aux|grep \"Sugram\"mobile 6542 0.0 2.9 5055392 59136 ?? Ss 8:38PM 0:00.51 /var/containers/Bundle/Application/12CA134A-E92A-4F35-BEAA-542F84A0A39F/Sugram.app/Sugram#注入方式对Sugram进行监听iPhone:~ root# debugserver 127.0.0.1:1234 --attach 6542 这时候被注入监听的那个APP就会进入卡死状态，因为debugserver已经对Sugram进行调试状态。 电脑端： 12345#先用iProxy 转发debugserver监听的端口iproxy 1234 1234#进入lldb 进行远程调试lldb(lldb) process connect connect://localhost:1234 #0x02 成功！出现如下画面说明debugserver 配置正确，lldb也可以进行动态调试了。😁😁 –专注逆向、网络安全 Lee"},{"title":"lldb调试大全","date":"2020-02-11T13:49:51.000Z","updated":"2020-02-11T13:49:51.659Z","comments":true,"path":"re/lldb调试大全.html","permalink":"https://vxer-lee.github.io/re/lldb%E8%B0%83%E8%AF%95%E5%A4%A7%E5%85%A8.html","excerpt":"","text":""},{"title":"拼多多数据库解密","date":"2020-01-19T06:22:52.000Z","updated":"2020-01-19T07:57:48.000Z","comments":true,"path":"re/拼多多数据库解密.html","permalink":"https://vxer-lee.github.io/re/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86.html","excerpt":"","text":"0x00 拼多多数据库在拼多多数据库中其中的t_mall_conversation表中的message字段数据内容被加密了 提取相应的关键字： t_mall_conversation message 0x01 逆向分析在其官网找到下载地址 1http:&#x2F;&#x2F;mcdn.yangkeduo.com&#x2F;android_dev&#x2F;2020-01-14&#x2F;b9af6563fb99283df18cbdedddef1e68.apk 查壳先用Android APK查壳工具，对拼多多APK进行查壳。如果有被加固需要进行下一步的脱壳操作，如下图：拼多多APK并未被加固。 反编译、关键字定位根据关键字t_mall_conversation定位到处理该表与message加密字段的类。 在该类下继续找到getMessage 与 setMessage方法，其中getMessage为获取Pdd数据库t_mall_conversation表中Message的字段（所以解密函数也在该方法中），而setMessage为相反的设置Message字段的内容（加密函数在该方法中）。 12a.b(message) //解密函数a.a(str) //加密函数 反编译、加密算法解析采用AES加密算法，向量为{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}，密钥为用户UID的MD5加密取前16位，UID的值在data/data/com.xunmeng.pinduoduo/files/pinUserFile文件中。 12345IV = new byte &#123;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&#125;;uid = 5564948642776;MD5(uid) = 479EE2A088591D9856CCDC451C1B4515;KEY = 479EE2A088591D98; AES加密算法 UID值 POC 编写、破解过程验证123456789101112131415161718192021222324252627282930313233343536import android.util.Base64;import java.security.Key;import javax.crypto.Cipher;//解密函数 public String PddMsgDecrypt(String msg) &#123; if (TextUtils.isEmpty(msg)) &#123; return msg; &#125; //MD5加密(uid) String md5Text = MD5Utils.digest(\"5564948642776\"); if (TextUtils.isEmpty(md5Text)) &#123; return msg; &#125; //IV byte[] iv = new byte[]&#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;; //KEY 取MD5前16位 byte[] key = md5Text.substring(0,16).getBytes(); //AES解密 try&#123; SecretKeySpec v1 = new SecretKeySpec(key, \"AES\"); IvParameterSpec v0_2 = new IvParameterSpec(iv); Cipher v2 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); v2.init(2, ((Key)v1), ((AlgorithmParameterSpec)v0_2)); return new String(v2.doFinal(Base64.decode(msg, 2))); &#125; catch(Throwable unstd) &#123; Log.v(\"Lee\", \"Fail to decrypt data with aes key through java\"); return msg; &#125; //POC 破解过程验证PddMsgDecrypt(\"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\"); 验证成功、成功解密 1&#123;&quot;auto_click&quot;:1,&quot;content&quot;:&quot;亲，欢迎来到拼多多，今后您在拼多多遇到的任何问题都可以咨询我哦～快快开启“多实惠，多乐趣”的购物之旅吧！&quot;,&quot;from&quot;:&#123;&quot;mall_id&quot;:&quot;606&quot;,&quot;role&quot;:&quot;mall_cs&quot;,&quot;uid&quot;:&quot;606&quot;&#125;,&quot;is_aut&quot;:0,&quot;is_rich_text&quot;:1,&quot;mallName&quot;:&quot;拼多多官方客服&quot;,&quot;msg_id&quot;:&quot;1579261690080&quot;,&quot;rich_text&quot;:&#123;&quot;content&quot;:[&#123;&quot;text&quot;:&quot;亲，欢迎来到拼多多，今后您在拼多多遇到的任何问题都可以咨询我哦～快快开启“多实惠，多乐趣”的购物之旅吧！&quot;,&quot;type&quot;:&quot;text&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;如何搜索商品&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;如何搜索商品&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;怎么在拼多多下单&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;怎么在拼多多下单&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;下单后如何支付&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;下单后如何支付&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;哪里可以看到我的订单&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;哪里可以看到我的订单&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;拼多多有哪些活动&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;拼多多有哪些活动&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;],&quot;template&quot;:&quot;text_with_menu_items&quot;,&quot;version&quot;:1&#125;,&quot;status&quot;:&quot;unread&quot;,&quot;template_name&quot;:&quot;parrot_rich_text_with_menu_item&quot;,&quot;to&quot;:&#123;&quot;role&quot;:&quot;user&quot;,&quot;uid&quot;:&quot;5564948642776&quot;&#125;,&quot;ts&quot;:&quot;1579261690&quot;,&quot;type&quot;:0,&quot;unread_count&quot;:1,&quot;user_has_read&quot;:true&#125;"},{"title":"湖湘杯 writeup","date":"2019-11-09T03:59:36.000Z","updated":"2020-01-06T14:08:39.613Z","comments":true,"path":"re/湖湘杯Writeup.html","permalink":"https://vxer-lee.github.io/re/%E6%B9%96%E6%B9%98%E6%9D%AFWriteup.html","excerpt":"","text":"一、查壳UPX的壳很好脱，可以在网上找现成的脱壳工具、或者是手动用单步跟踪法、ESP定律法。 二、下断点 找到OEP然后下断(这里入口点感觉被修改过变异过 不像正常的vc++2015程序的入口点) 右键字符串智能搜索 找到关键字 input Your Flag 单步跟踪 三、分析1234567891001355386 52 push edx01355387 68 68A03501 push reverse.0135A068 ; fmcj2y~&#123;0135538C E8 16C0FFFF call reverse.013513A7; 比较最后输入的命令行参数是否为(fmcj2y~&#123;)01355391 83C4 08 add esp,0x8 ; 类似于c:\\tset\\reverse.exe fmcj2y~&#123;01355394 85C0 test eax,eax01355396 74 19 je Xreverse.013553B101355398 68 307E3501 push reverse.01357E30 ; Input Error!\\n0135539D E8 D8BFFFFF call reverse.0135137A013553A2 83C4 04 add esp,0x4013553A5 33C0 xor eax,eax 关键函数1 关键函数2 41A078地址的值为： 1234567891011121314151641A078[0] = 5041A078[1] = c641A078[2] = f141A078[3] = e441A078[4] = e341A078[5] = e241A078[6] = 9a41A078[7] = a141A078[8] = a741A078[9] = de41A078[10] = da41A078[11] = 4641A078[12] = ab41A078[13] = 2e41A078[14] = ff41A078[15] = db 最后将每个值减1得到flagflag{4fc5f0e3e2e199a0a6ddd945aa2dfeda}"},{"title":"web","date":"2020-04-06T03:19:04.000Z","updated":"2020-04-06T03:19:05.006Z","comments":true,"path":"web/index.html","permalink":"https://vxer-lee.github.io/web/index.html","excerpt":"","text":""},{"title":"","date":"2020-02-13T12:34:01.764Z","updated":"2020-02-13T12:33:32.971Z","comments":true,"path":"re/Sugram聊天数据库解密/CC_hook.js","permalink":"https://vxer-lee.github.io/re/Sugram%E8%81%8A%E5%A4%A9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/CC_hook.js","excerpt":"","text":"// Intercept the CCCrypt call. Interceptor.attach(Module.findExportByName('libcommonCrypto.dylib', 'CCCrypt'), { onEnter: function (args) { // Save the arguments this.operation = args[0] this.CCAlgorithm = args[1] this.CCOptions = args[2] this.keyBytes = args[3] this.keyLength = args[4] this.ivBuffer = args[5] this.inBuffer = args[6] this.inLength = args[7] this.outBuffer = args[8] this.outLength = args[9] this.outCountPtr = args[10] console.log('CCCrypt(' + 'operation: ' + this.operation +', ' + 'CCAlgorithm: ' + this.CCAlgorithm +', ' + 'CCOptions: ' + this.CCOptions +', ' + 'keyBytes: ' + this.keyBytes +', ' + 'keyLength: ' + this.keyLength +', ' + 'ivBuffer: ' + this.ivBuffer +', ' + 'inBuffer: ' + this.inBuffer +', ' + 'inLength: ' + this.inLength +', ' + 'outBuffer: ' + this.outBuffer +', ' + 'outLength: ' + this.outLength +', ' + 'outCountPtr: ' + this.outCountPtr +')') if (this.operation == 0) { // Show the buffers here if this an encryption operation console.log(\"In buffer:\") console.log(hexdump(ptr(this.inBuffer), { length: this.inLength.toInt32(), header: true, ansi: true })) console.log(\"Key: \") console.log(hexdump(ptr(this.keyBytes), { length: this.keyLength.toInt32(), header: true, ansi: true })) console.log(\"IV: \") console.log(hexdump(ptr(this.ivBuffer), { length: this.keyLength.toInt32(), header: true, ansi: true })) console.log(\"Out Buffer:\") console.log(this.outBuffer) } }, onLeave: function (retVal) { if (this.operation == 1) { // Show the buffers here if this a decryption operation //print input buffer console.log(\"In buffer:\") console.log(hexdump(ptr(this.inBuffer), { length: this.inLength.toInt32(), header: true, ansi: true })) ///////////////////// console.log(\"Out buffer:\") console.log(hexdump(ptr(this.outBuffer), { length: Memory.readUInt(this.outCountPtr), header: true, ansi: true })) console.log(\"Key: \") console.log(hexdump(ptr(this.keyBytes), { length: this.keyLength.toInt32(), header: true, ansi: true })) console.log(\"IV: \") console.log(hexdump(ptr(this.ivBuffer), { length: this.keyLength.toInt32(), header: true, ansi: true })) } } })"},{"title":"","date":"2020-07-30T07:40:39.276Z","updated":"2020-07-30T07:39:45.930Z","comments":true,"path":"re/sql.js","permalink":"https://vxer-lee.github.io/re/sql.js","excerpt":"","text":"Java.perform(function () { //wcdb try { const SQLiteConnection = Java.use('com.tencent.wcdb.database.SQLiteConnection'); SQLiteConnection.nativeOpen.implementation = function (path, openFlags, vfsName) { var result = this.nativeOpen(path, openFlags, vfsName); console.log(\"-->nativeOpen(path:\" + path + \",openFlags:\" + openFlags + \",vfsName:\" + vfsName + \"):\" + result); return result; } const String = Java.use('java.lang.String') SQLiteConnection.nativeSetKey.implementation = function (connectionPtr, password) { var result = this.nativeSetKey(connectionPtr, password); console.log('passwordStr:' + String.$new(password)); console.log(\"-->nativeSetKey(connectionPtr:\" + connectionPtr + \",password:\" + password + \"):\" + result); return result; } } catch (e) { console.log(e) } //sqlcipher try { const SQLiteDatabase = Java.use('net.sqlcipher.database.SQLiteDatabase'); SQLiteDatabase.dbopen.implementation = function (path, flags) { var result = this.dbopen(path, flags); console.log(\"-->dbopen(path:\" + path + \",openFlags:\" + flags + \"):\" + result); return result; } SQLiteConnection.key.implementation = function (password) { var result = this.key(password); console.log('passwordStr:' + String.$new(password)); console.log(\"-->key(password:\" + password + \"):\" + result); return result; } SQLiteConnection.key_mutf8.implementation = function (password) { var result = this.key_mutf8(password); console.log('passwordStr:' + String.$new(password)); console.log(\"-->key_mutf8(password:\" + password + \"):\" + result); return result; } SQLiteConnection.rekey.implementation = function (password) { var result = this.rekey(password); console.log('passwordStr:' + String.$new(password)); console.log(\"-->rekey(password:\" + password + \"):\" + result); return result; } } catch (e) { console.log(e) } });"},{"title":"","date":"2020-07-30T07:47:21.928Z","updated":"2020-07-30T07:46:22.542Z","comments":true,"path":"re/Sugram聊天数据库解密/sqlite3.js","permalink":"https://vxer-lee.github.io/re/Sugram%E8%81%8A%E5%A4%A9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/sqlite3.js","excerpt":"","text":"// Intercept the CCCrypt call. Interceptor.attach(Module.findExportByName('libcommonCrypto.dylib', 'CCCrypt'), { onEnter: function (args) { // Save the arguments this.operation = args[0] this.CCAlgorithm = args[1] this.CCOptions = args[2] this.keyBytes = args[3] this.keyLength = args[4] this.ivBuffer = args[5] this.inBuffer = args[6] this.inLength = args[7] this.outBuffer = args[8] this.outLength = args[9] this.outCountPtr = args[10] console.log('CCCrypt(' + 'operation: ' + this.operation +', ' + 'CCAlgorithm: ' + this.CCAlgorithm +', ' + 'CCOptions: ' + this.CCOptions +', ' + 'keyBytes: ' + this.keyBytes +', ' + 'keyLength: ' + this.keyLength +', ' + 'ivBuffer: ' + this.ivBuffer +', ' + 'inBuffer: ' + this.inBuffer +', ' + 'inLength: ' + this.inLength +', ' + 'outBuffer: ' + this.outBuffer +', ' + 'outLength: ' + this.outLength +', ' + 'outCountPtr: ' + this.outCountPtr +')') if (this.operation == 0) { // Show the buffers here if this an encryption operation console.log(\"In buffer:\") console.log(hexdump(ptr(this.inBuffer), { length: this.inLength.toInt32(), header: true, ansi: true })) console.log(\"Key: \") console.log(hexdump(ptr(this.keyBytes), { length: this.keyLength.toInt32(), header: true, ansi: true })) console.log(\"IV: \") console.log(hexdump(ptr(this.ivBuffer), { length: this.keyLength.toInt32(), header: true, ansi: true })) console.log(\"Out Buffer:\") console.log(this.outBuffer) } }, onLeave: function (retVal) { if (this.operation == 1) { // Show the buffers here if this a decryption operation //print input buffer console.log(\"In buffer:\") console.log(hexdump(ptr(this.inBuffer), { length: this.inLength.toInt32(), header: true, ansi: true })) ///////////////////// console.log(\"Out buffer:\") console.log(hexdump(ptr(this.outBuffer), { length: Memory.readUInt(this.outCountPtr), header: true, ansi: true })) console.log(\"Key: \") console.log(hexdump(ptr(this.keyBytes), { length: this.keyLength.toInt32(), header: true, ansi: true })) console.log(\"IV: \") console.log(hexdump(ptr(this.ivBuffer), { length: this.keyLength.toInt32(), header: true, ansi: true })) } } })"},{"title":"分类","date":"2020-08-01T13:49:25.446Z","updated":"2020-08-01T13:49:25.446Z","comments":false,"path":"categories/index.html","permalink":"https://vxer-lee.github.io/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2020-08-01T13:46:12.313Z","updated":"2020-08-01T13:46:12.313Z","comments":false,"path":"/404.html","permalink":"https://vxer-lee.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2020-08-01T13:46:02.158Z","updated":"2020-08-01T13:46:02.158Z","comments":false,"path":"books/index.html","permalink":"https://vxer-lee.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-08-01T13:46:34.266Z","updated":"2020-08-01T13:46:34.266Z","comments":true,"path":"links/index.html","permalink":"https://vxer-lee.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-08-01T13:45:53.144Z","updated":"2020-08-01T13:45:53.144Z","comments":false,"path":"repository/index.html","permalink":"https://vxer-lee.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-08-01T13:46:24.712Z","updated":"2020-08-01T13:46:24.712Z","comments":false,"path":"tags/index.html","permalink":"https://vxer-lee.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-07-30T03:06:55.956Z","updated":"2020-02-13T12:33:32.971Z","comments":true,"path":"Sugram聊天数据库解密/CC_hook.js","permalink":"https://vxer-lee.github.io/Sugram%E8%81%8A%E5%A4%A9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/CC_hook.js","excerpt":"","text":"// Intercept the CCCrypt call. Interceptor.attach(Module.findExportByName('libcommonCrypto.dylib', 'CCCrypt'), { onEnter: function (args) { // Save the arguments this.operation = args[0] this.CCAlgorithm = args[1] this.CCOptions = args[2] this.keyBytes = args[3] this.keyLength = args[4] this.ivBuffer = args[5] this.inBuffer = args[6] this.inLength = args[7] this.outBuffer = args[8] this.outLength = args[9] this.outCountPtr = args[10] console.log('CCCrypt(' + 'operation: ' + this.operation +', ' + 'CCAlgorithm: ' + this.CCAlgorithm +', ' + 'CCOptions: ' + this.CCOptions +', ' + 'keyBytes: ' + this.keyBytes +', ' + 'keyLength: ' + this.keyLength +', ' + 'ivBuffer: ' + this.ivBuffer +', ' + 'inBuffer: ' + this.inBuffer +', ' + 'inLength: ' + this.inLength +', ' + 'outBuffer: ' + this.outBuffer +', ' + 'outLength: ' + this.outLength +', ' + 'outCountPtr: ' + this.outCountPtr +')') if (this.operation == 0) { // Show the buffers here if this an encryption operation console.log(\"In buffer:\") console.log(hexdump(ptr(this.inBuffer), { length: this.inLength.toInt32(), header: true, ansi: true })) console.log(\"Key: \") console.log(hexdump(ptr(this.keyBytes), { length: this.keyLength.toInt32(), header: true, ansi: true })) console.log(\"IV: \") console.log(hexdump(ptr(this.ivBuffer), { length: this.keyLength.toInt32(), header: true, ansi: true })) console.log(\"Out Buffer:\") console.log(this.outBuffer) } }, onLeave: function (retVal) { if (this.operation == 1) { // Show the buffers here if this a decryption operation //print input buffer console.log(\"In buffer:\") console.log(hexdump(ptr(this.inBuffer), { length: this.inLength.toInt32(), header: true, ansi: true })) ///////////////////// console.log(\"Out buffer:\") console.log(hexdump(ptr(this.outBuffer), { length: Memory.readUInt(this.outCountPtr), header: true, ansi: true })) console.log(\"Key: \") console.log(hexdump(ptr(this.keyBytes), { length: this.keyLength.toInt32(), header: true, ansi: true })) console.log(\"IV: \") console.log(hexdump(ptr(this.ivBuffer), { length: this.keyLength.toInt32(), header: true, ansi: true })) } } })"}],"posts":[{"title":"iOS应用逆向与安全-WhatsApp防撤回开发","slug":"iOS应用逆向与安全-WhatsApp分析","date":"2020-06-29T04:32:31.000Z","updated":"2020-08-01T14:38:36.615Z","comments":true,"path":"iOS应用逆向与安全-WhatsApp分析.html","link":"","permalink":"https://vxer-lee.github.io/iOS%E5%BA%94%E7%94%A8%E9%80%86%E5%90%91%E4%B8%8E%E5%AE%89%E5%85%A8-WhatsApp%E5%88%86%E6%9E%90.html","excerpt":"","text":"庆总的《iOS应用逆向与安全》看得也差不多了，根据最后一张，自己也分析下最新版本的WhatsApp软件的分析。 版本：2.20.51 盗墓准备：砸壳哈哈😸，最近可能鬼吹灯看多了，很喜欢吧逆向流程分为，盗墓准备-分经定穴-起尸开馆-盗墓。 砸壳的方式现在真的五花八门，有各种工具来砸壳，其中比较好用有名的是用庆总用Frida框架写的frida-ios-dump，其下载地址为https://github.com/AloneMonkey/frida-ios-dump. 还有Lakr Aream大佬写的VS Code插件iOSre Extension，该插件包含很多功能，可以列出所有APP，可以动态调试、可以一键脱壳、加载文件系统、下载上传文件。具体使用的话，在VS Code中直接安装该插件即可。其github地址为https://github.com/Co2333/iOSreExtension 我个人的话比较喜欢CrackXI，是在手机上的越狱应用，在Cydia中添加蚂蚁源，安装CrackXI后打开I在其AppList界面点击需要砸壳的APP，然后点击YES,Full IPA开始砸壳，真的很简单好用。 frida-ios-dump https://github.com/AloneMonkey/frida-ios-dump 作者：庆总 iOSre Extension https://github.com/Co2333/iOSreExtension 作者：Lakr Aream CrackerXI https://apt.cydia.love/misc 作者：蚂蚁源 导出头文件： 12#将WhatsApp程序的头文件导出到Headers文件中.class-dump WhatsApp.app -A -H -o ./Headers 还原符号表: 1234567891011121314#先在Github上下载restore-symbolgit clone --recursive https://github.com/tobefuturer/restore-symbol.gitcd restore-symbolmake#然后链接到系统Bin，方便使用cd /usr/local/binln /User/lee/restore-symbol/restore-symbol restore-symbol#拷贝可执行文件、瘦身、恢复符号表cd /User/lee/Desktop/whatsappcp WhatsApp.app/whatsApp ./whatsApp_decrypt &amp;&amp; chmod 777 whatsApp_decryptlipo whatsApp_decrypt -thin arm64 -o whatsApp &amp;&amp; chmod 777 whatsApprestore-symbol WhatsApp -o WhatsApp_With_Symbol#然后替换WhatsApp.app里面的可执行文件,再用mobiledevice 安装mobiledevice WhatsApp.app . 分金定穴：分析Reveal 查看UI层下载最新的Reveal，我这边目前最新的Reveal版本是26，然后配置下RevealServer，具体可以参考这一篇文章。 https://meilbn.com/2019/08/23/install-reveal2loader-on-jailbreak-device-ios12/#0x03_%E6%9B%B4%E6%96%B0_RevealServer-framework 启动WhatsApp并打开聊天对话框，然后用Reveal查看WhatsApp的消息控件，得知是WAMessaegContainerView类。 VSCode 查找切入点VSCode打开用class-dump出来的WhatsApp头文件，搜索WAMessageContainerView头文件然后找到可疑的方法，由于我们是要做长按消息然后弹出框里面加收藏的功能，所以找到一个可疑的方法handleLongPressAtPoint,字面意思就是长按","categories":[{"name":"逆向","slug":"逆向","permalink":"https://vxer-lee.github.io/categories/%E9%80%86%E5%90%91/"}],"tags":[{"name":"iOS逆向","slug":"iOS逆向","permalink":"https://vxer-lee.github.io/tagsssss/iOS%E9%80%86%E5%90%91/"}]},{"title":"iOS13 动态调试配置之debugserver","slug":"iOS13-动态调试配置之debugserver","date":"2020-02-06T09:30:34.000Z","updated":"2020-08-01T14:37:46.585Z","comments":true,"path":"iOS13-动态调试配置之debugserver.html","link":"","permalink":"https://vxer-lee.github.io/iOS13-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE%E4%B9%8Bdebugserver.html","excerpt":"","text":"疫情期间家里没网🤣，好久没更新了，刚回到杭州给自己iOS逆向充充电。[武汉加油💪] iOS逆向里面比较重要的几项技能：动态调试、静态分析、HOOK关键函数、重签名 先来讲下动态调试，iOS动态调试需要一个服务端和客户端程序，服务端程序在手机上监听要动态调试程序的进程ID或是程序名，客户端程序在Mac OS系统上运行。 123服务端程序:debugserver客户端程序:lldb#这两个程序不用额外的去外网下载，只要你的Mac电脑有装XCode，并且进行真机调试过（真机调试一般可以在淘宝买UDID开发者证书，就是和你手机UDID绑定的证书那么你就可以在你手机上安装开发你的APP|土豪（开发者账号）） 只要你手机进行真机调试过，那么在你手机的这个目录下就会有debugserver 12/Developer/usr/bin/debugserver#不过这个debugserver 默认只能调试自己开发的APP，我们逆向当然是要逆别人的程序，所以想要debugserver能调试三方APP，需要进行一些修改，下面就是修改的一些重点。 #0x00 配置debugserver 赋予权限debugserver默认只能调试自己开发的应用，调试其他应用会抛异常unable to start the exception thread。默认的debugserver缺少task_for_pid()权限，因此需要给debugserver赋予task_for_pid权限。——这是网上摘抄的话 我发现网上配置debugserver的方法已经过时，不适用iOS13系统，导致debugserver还是无法调试三方APP，所以按照如下方法进行。 1、 新建一个文件名为ent.xml 1234567891011121314151617181920212223242526272829303132&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt;&lt;dict&gt; &lt;key&gt;com.apple.backboardd.debugapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.backboardd.launchapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.diagnosticd.diagnostic&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.frontboard.debugapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.frontboard.launchapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.security.network.client&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.security.network.server&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.springboard.debugapplications&lt;/key&gt; &lt;true/&gt; &lt;key&gt;com.apple.system-task-ports&lt;/key&gt; &lt;true/&gt; &lt;key&gt;get-task-allow&lt;/key&gt; &lt;true/&gt; &lt;key&gt;platform-application&lt;/key&gt; &lt;true/&gt; &lt;key&gt;run-unsigned-code&lt;/key&gt; &lt;true/&gt; &lt;key&gt;task_for_pid-allow&lt;/key&gt; &lt;true/&gt;&lt;/dict&gt;&lt;/plist&gt; 2、用ldid对debugserver签名 赋予权限 12ldid -Sxml全路径 debugserver全路径`例如：`ldid -Sent.xml debugserver 这里要SSH连入iPhone手机执行命令：需要越狱您的iPhone,不会的请去看 疯先生越狱 123456789101112131415161718#开启端口转发,数据线连SSHiproxy 2222 44 #默认用Checkra1n越狱的端口号为44，其余的默认为22#连入iPhone SSHssh root@localhost -p 2222 #iPhone默认ssh密码,alpine#切换到debugserver存在的目录iPhone:~ root# cd /Developer/usr/bin/iPhone:/Developer/usr/bin root# lsDTDeviceArbitration* ScreenShotr* axauditd* debugserver*#新建ent.xml文件iPhone:/Developer/usr/bin root# vim ent.xml #将1、里面的ent.xml内容复制进去，并且保存#最后ldid赋予权限iPhone:/Developer/usr/bin root# ldid -Sent.xml debugserver#拷贝到系统目录iPhone:/Developer/usr/bin root# copy ./debugserver /usr/bin #0x01 验证debugserver 进行动态调试配置好iPhone端的debugserver后，就可以在Mac电脑上用lldb远程进行动态调试了lldb调试大全后续会讲，此次注重debugserver的配置，lldb一笔带，只要知道lldb是Mac上的客户端用来动态调试。 以调试Sugram 聊天软件为例 手机端： 123456#查看Sugram的进程IDiPhone:~ root# ps aux|grep \"Sugram\"mobile 6542 0.0 2.9 5055392 59136 ?? Ss 8:38PM 0:00.51 /var/containers/Bundle/Application/12CA134A-E92A-4F35-BEAA-542F84A0A39F/Sugram.app/Sugram#注入方式对Sugram进行监听iPhone:~ root# debugserver 127.0.0.1:1234 --attach 6542 这时候被注入监听的那个APP就会进入卡死状态，因为debugserver已经对Sugram进行调试状态。 电脑端： 12345#先用iProxy 转发debugserver监听的端口iproxy 1234 1234#进入lldb 进行远程调试lldb(lldb) process connect connect://localhost:1234 #0x02 成功！出现如下画面说明debugserver 配置正确，lldb也可以进行动态调试了。😁😁 –专注逆向、网络安全 Lee","categories":[{"name":"逆向","slug":"逆向","permalink":"https://vxer-lee.github.io/categories/%E9%80%86%E5%90%91/"}],"tags":[{"name":"iOS逆向","slug":"iOS逆向","permalink":"https://vxer-lee.github.io/tagsssss/iOS%E9%80%86%E5%90%91/"}]},{"title":"拼多多数据库解密","slug":"拼多多数据库解密","date":"2020-01-08T06:22:52.000Z","updated":"2020-08-01T14:37:54.964Z","comments":true,"path":"拼多多数据库解密.html","link":"","permalink":"https://vxer-lee.github.io/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86.html","excerpt":"","text":"0x00 拼多多数据库在拼多多数据库中其中的t_mall_conversation表中的message字段数据内容被加密了 提取相应的关键字： t_mall_conversation message 0x01 逆向分析在其官网找到下载地址 1http:&#x2F;&#x2F;mcdn.yangkeduo.com&#x2F;android_dev&#x2F;2020-01-14&#x2F;b9af6563fb99283df18cbdedddef1e68.apk 查壳先用Android APK查壳工具，对拼多多APK进行查壳。如果有被加固需要进行下一步的脱壳操作，如下图：拼多多APK并未被加固。 反编译、关键字定位根据关键字t_mall_conversation定位到处理该表与message加密字段的类。 在该类下继续找到getMessage 与 setMessage方法，其中getMessage为获取Pdd数据库t_mall_conversation表中Message的字段（所以解密函数也在该方法中），而setMessage为相反的设置Message字段的内容（加密函数在该方法中）。 12a.b(message) //解密函数a.a(str) //加密函数 反编译、加密算法解析采用AES加密算法，向量为{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}，密钥为用户UID的MD5加密取前16位，UID的值在data/data/com.xunmeng.pinduoduo/files/pinUserFile文件中。 12345IV = new byte &#123;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&#125;;uid = 5564948642776;MD5(uid) = 479EE2A088591D9856CCDC451C1B4515;KEY = 479EE2A088591D98; AES加密算法 UID值 POC 编写、破解过程验证123456789101112131415161718192021222324252627282930313233343536import android.util.Base64;import java.security.Key;import javax.crypto.Cipher;//解密函数 public String PddMsgDecrypt(String msg) &#123; if (TextUtils.isEmpty(msg)) &#123; return msg; &#125; //MD5加密(uid) String md5Text = MD5Utils.digest(\"5564948642776\"); if (TextUtils.isEmpty(md5Text)) &#123; return msg; &#125; //IV byte[] iv = new byte[]&#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;; //KEY 取MD5前16位 byte[] key = md5Text.substring(0,16).getBytes(); //AES解密 try&#123; SecretKeySpec v1 = new SecretKeySpec(key, \"AES\"); IvParameterSpec v0_2 = new IvParameterSpec(iv); Cipher v2 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); v2.init(2, ((Key)v1), ((AlgorithmParameterSpec)v0_2)); return new String(v2.doFinal(Base64.decode(msg, 2))); &#125; catch(Throwable unstd) &#123; Log.v(\"Lee\", \"Fail to decrypt data with aes key through java\"); return msg; &#125; //POC 破解过程验证PddMsgDecrypt(\"fKt3i73/hNjTPjEL/AIFhMLxuEd1XX0p9sfQ7++CPjgnTDnRzG+1dsiZ6S4f5/HlfCw4XL3/Oisudg2I+i2maQzjaoRGxa0iCtCWrKLwbZU5zkt4J0JCKtV3CZC5JQeVvfn++p8EjsHluhwidX7zg8hqA3wueZYUmwfHdyzMUultYeNOLYDfcmYXHhaFet0NUNvUKaBvwDZm2ah6Drpo9W1UK9GN6rntX58idkPULZnzZErIGHCnPIpJ5cVb8sIAo6iLOMSPPTmGyePfx35veXKVFm38u7o8jkWKOCFC6puHncyFu53f/wBNa0LmQINq5Qf62mgZFbXY+lcT9g+vqVhaW7oA2OsJh7bp+1Xrwv0OdZE1B04bFnpP14Z/1INz3MeMMutA48DoCDyJ2jqQTzFv94WiCnLTtFdoGpIy5bAFMg4zRwzyRYo5Z2kD2+EeyF/lXS+r3QBOACJrw3LEx1kLglyfSqJbdJU9CbQGNmCciZ5ec/glTHRvtefNIe2KHYYMPupxbwHbWHSSQCDyL5IgnfAbTc0jMk82KKlk2LyrlJxeTo4s5yk4njnAhLesGoaGfevnnpx12Unk3FpcQ+rrNC+zMjsjXM5wL5ly8o21x/KLAlGsOfM4YSJaH9f4QS3xU1x8jKZMDYr3LnBcNOU+5dRp3gUdEUFJgDN5wUhsjw5UyPDGZmETHG+pJOt8z9kOOJeuldOEfAAx7sJEor8dM6qJwGLI43LnapnwWYXeAkMfH7pR8coD6IrZgJW9sjt6EoFJa7NU1JTykSP3T7okQyEvk8fVdcHF+Hf6BawhXC2Xy6bWmymQKFXJhhzUeJeQEzZi9FU+TqyeTc7AYCYzrsHsjBHnJxC+P4hdexJXYDCue3qxsrz4zC3R+ZE50QpPUTjdrY3bmUmhk+RxgnUp+TpsUhVbb2p/m4017SWGJV+XPPdnG21uGoxcmNHwGN78jWmkI8kg/09+vBiqV4X8U8tXaD2dHKtJf5ZOr7nyADsqekX6EVrCXcKVlecGHvs0zJgScxb9fTS6bEfa2TW+4aZPVD/Zd9gK7+LD/kP0Lupx+9gQPTO4ElCVJ/hoYD2sBhc7Mmu9iLNKuTHOZ8pidvIoyEMj/4/CyZRUoS2eifc+L39xyEnB/P9+2k+a/xTS3gvkfYAD+OIUbok4uU0K1Rko1SLPoNdcxDOmbbcAl8oDOWH7Qd/qTfj4PQ3weIEgV6/p5ZZkPQi8UJi2Z21UO5M4aOyJVugwcDHvEAyJiVaOAPHd7I4CNj5B0LETEhc4NlOqoN2GvF9ztqdkk03Neb1YCZGT+Lgv8mzumyOccOM/K2wQfS7s9iNU4uGskFGYxUXOBhHLaRARhHny/EFiSbvZOtkqKEA9uRupHDjRzW+1ubRJfF++EubkwpvSQVhJfLZa4AWUS3PFUHP1cnwfwUUEKzaFXSLu6F+sPBb796KxK+Ulr7W8lBRsdmHZL60b7Zz582HAZnx+JFUcjiJKlqy2JqcEEyJAQ4S5B2M1WvFWCkQfaBrGrcd32WIGcEhL7ee5AhNLD+f8hfYwQXm2JLwWA9zg87Lt6MgQvumyjzKfH4NP9UTHuthcI3eM+AKHZoHXNeKVBEmvSApHUs5zQ44xwIfXby/m9pMBrRc/Wl+wHc80SGngLfK3JSmbD9KcTVxPez6qzjBUOlL2dZix5BY4pLZKCQhplMV9FljpTkweBxB8ya75vigSDveW6pcPtnxH4a23kuV3TP/6ba4k8cf40kWPXlx3RmZObp6c71Q69kSAnmtPi0O5bguSvBY/cnYHxyLj6OsflgEVYIECqOVPoioPeJ/0nAPMO2cs2cbsMRFqeWsYGUeFsu4tkeU21r8/G/FyR9CjCN7VX9ny0u37y1iVa6eh3TouzyP1CY7iZBo2NtR87cCqckAV9QphlK/FkZ5+IqkWohMHLyds+ezigvmHNaz4MQQ+QU7SIaHX/+juOxGcO8Gj83lb/n99FCx5Oyi58NfCRaocxsfFDQqoCOjrWs/ig+WTm6E=\"); 验证成功、成功解密 1&#123;&quot;auto_click&quot;:1,&quot;content&quot;:&quot;亲，欢迎来到拼多多，今后您在拼多多遇到的任何问题都可以咨询我哦～快快开启“多实惠，多乐趣”的购物之旅吧！&quot;,&quot;from&quot;:&#123;&quot;mall_id&quot;:&quot;606&quot;,&quot;role&quot;:&quot;mall_cs&quot;,&quot;uid&quot;:&quot;606&quot;&#125;,&quot;is_aut&quot;:0,&quot;is_rich_text&quot;:1,&quot;mallName&quot;:&quot;拼多多官方客服&quot;,&quot;msg_id&quot;:&quot;1579261690080&quot;,&quot;rich_text&quot;:&#123;&quot;content&quot;:[&#123;&quot;text&quot;:&quot;亲，欢迎来到拼多多，今后您在拼多多遇到的任何问题都可以咨询我哦～快快开启“多实惠，多乐趣”的购物之旅吧！&quot;,&quot;type&quot;:&quot;text&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;如何搜索商品&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;如何搜索商品&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;怎么在拼多多下单&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;怎么在拼多多下单&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;下单后如何支付&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;下单后如何支付&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;哪里可以看到我的订单&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;哪里可以看到我的订单&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;,&#123;&quot;click_action&quot;:&#123;&quot;name&quot;:&quot;send_message&quot;,&quot;params&quot;:&#123;&quot;content&quot;:&quot;拼多多有哪些活动&quot;&#125;&#125;,&quot;hide&quot;:0,&quot;text&quot;:&quot;拼多多有哪些活动&quot;,&quot;type&quot;:&quot;menu_item&quot;&#125;],&quot;template&quot;:&quot;text_with_menu_items&quot;,&quot;version&quot;:1&#125;,&quot;status&quot;:&quot;unread&quot;,&quot;template_name&quot;:&quot;parrot_rich_text_with_menu_item&quot;,&quot;to&quot;:&#123;&quot;role&quot;:&quot;user&quot;,&quot;uid&quot;:&quot;5564948642776&quot;&#125;,&quot;ts&quot;:&quot;1579261690&quot;,&quot;type&quot;:0,&quot;unread_count&quot;:1,&quot;user_has_read&quot;:true&#125;","categories":[{"name":"逆向","slug":"逆向","permalink":"https://vxer-lee.github.io/categories/%E9%80%86%E5%90%91/"}],"tags":[{"name":"Android逆向","slug":"Android逆向","permalink":"https://vxer-lee.github.io/tagsssss/Android%E9%80%86%E5%90%91/"}]},{"title":"Mimikatz破解Windows登陆密码","slug":"mimikatz破解Windows登陆密码","date":"2020-01-07T04:50:11.000Z","updated":"2020-08-13T06:29:34.267Z","comments":true,"path":"mimikatz破解Windows登陆密码.html","link":"","permalink":"https://vxer-lee.github.io/mimikatz%E7%A0%B4%E8%A7%A3Windows%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81.html","excerpt":"","text":"使用场景已获取system权限，无法在目标机器上上传Mimikatz(有杀软或者限制啥的)，这个时候可以通过reg命令导出SAM和SYSTEM文件，离线读取出NTML HASH，其实也可以用procdump64和mimikatz抓取Windows用户密码，这个小技巧算是另外一种方式吧 利用方式首先导出两个文件，可能需要管理员权限 ，CMD或者Powershell运行都可以。 12reg save hklm\\sam sam.hivereg save hklm\\system system.hive 然后将这两个hive文件放到和Mimikatz同一个目录下，你可将目标机器的这两个文件拖出来到自己机器上尝试 mimikatz下载链接：https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20200809 . 运行mimikatz，输入命令 1lsadump::sam /sam:sam.hive /system:system.hive 获取NTML后，我们对其进行解密，就随便找个稍微好用的解密网站就行，这里用cmd5进行解密.","categories":[{"name":"渗透","slug":"渗透","permalink":"https://vxer-lee.github.io/categories/%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"内网攻防","slug":"内网攻防","permalink":"https://vxer-lee.github.io/tagsssss/%E5%86%85%E7%BD%91%E6%94%BB%E9%98%B2/"}]},{"title":"熬夜之干JS加密","slug":"熬夜之干JS加密","date":"2020-01-07T03:59:36.000Z","updated":"2020-08-01T14:38:30.494Z","comments":true,"path":"熬夜之干JS加密.html","link":"","permalink":"https://vxer-lee.github.io/%E7%86%AC%E5%A4%9C%E4%B9%8B%E5%B9%B2JS%E5%8A%A0%E5%AF%86.html","excerpt":"","text":"朋友发了这么一段东西，然后和我说熬夜也要把它解出来 我：？？？？？？？？ 没错经过一番搜索后发现这是一段加密的JS代码。 (!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[+[]]+[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]]+[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]+(![]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]] 这是一段Js代码，利用js引擎语法 运算符 优先级等特性，让代码看起来特别难懂复杂。 首先要运用到的第一个知识就是js运算符的优先级，因为这么长一段运算看的人眼花，我们必须得先根据优先级分成n小段，然后再各个击破。优先级的排列如下表： 优先级从高到低： 运算符 说明 .[ ] ( ) 字段访问、数组索引、函数调用和表达式分组 ++ – - ~ ! delete new typeof void 一元运算符、返回数据类型、对象创建、未定义的值 * / % 相乘、相除、求余数 + - + 相加、相减、字符串串联 &lt;&lt; &gt;&gt; &gt;&gt;&gt; 移位 &lt; &lt;= &gt; &gt;= instanceof 小于、小于或等于、大于、大于或等于、是否为特定类的实例 == != === !== 相等、不相等、全等，不全等 &amp; 按位“与” ^ 按位“异或” | 按位“或” &amp;&amp; 逻辑“与” || 逻辑“或” ?: 条件运算 = OP= 赋值、赋值运算（如 += 和 &amp;=） , 多个计算 代码拆分根据（）和[] 代码一共可以拆分成28段。 其实这28段代表的就是 e9a699e6b8af3731e78bace7ab8b 个字节 举例第一段:(!![]+[])[!+[]+!+[]+!+[]] 把() 和 []分开来就是 (!![]+[]). 等于 true [!+[]+!+[]+!+[]] 等于 3 然后合起来就是”true”[3] 意思就是 取”true”这个字符串 从0开始到第3个字符, 也就是e 举例第二段：第二段则是 !+[] 代表1 一共是 9个1相加 !+[] !+[] !+[] !+[] !+[] !+[] !+[] !+[] !+[] 所以第一段和第二段加起来就是e9,也就是那段e9a699e6b8af3731e78bace7ab8b 前两个字 后面的段以此类推 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283//第一段(!![]+[])[!+[]+!+[]+!+[]] +//第二段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]] +//第三段(![]+[])[+!+[]]+//第四段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第五段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第六段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第七段(!![]+[])[!+[]+!+[]+!+[]]+//第八段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第九段([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]+//第十段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第十一段(![]+[])[+!+[]]+//第十二段(![]+[])[+[]]+//第十三段[!+[]+!+[]+!+[]]+//第十四段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第十五段[!+[]+!+[]+!+[]]+//第十六段[+!+[]]+//第十七段(!![]+[])[!+[]+!+[]+!+[]]+//第十八段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第十九段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第二十段([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]+//第二十一段(![]+[])[+!+[]]+//第二十二段([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+//第二十三段(!![]+[])[!+[]+!+[]+!+[]]+//第二十四段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第二十五段(![]+[])[+!+[]]+//第二十六段([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]+//第二十七段[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+//第二十八段([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]] python拟代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#coding=utf8import binasciiimport sysreload(sys)#e9a699e6b8af3731e78bace7ab8b#(!![]+[])[!+[]+!+[]+!+[]]#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]sub1 = 1&lt;2sub1_end = str(sub1)[3] + str(9)print sub1_end #e9#(![]+[])[+!+[]]#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]sub2 = 1&gt;2sub2_end = str(sub2)[1] + str(6)print sub2_end #a6#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]sub3 = 9sub3_end = str(sub3) + str(sub3)print sub3_end #99#(!![]+[])[!+[]+!+[]+!+[]]#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]sub4 = 1&lt;2sub4_end = str(sub4)[3] + str(6)print sub4_end #e6#([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]sub5 = '[object Array Iterator]'sub5_end = sub5[2] + str(8)print sub5_end #b8#(![]+[])[+!+[]]#(![]+[])[+[]]sub6 = 1&gt;2sub6_end = str(sub6)[1] + str(sub6).lower()[0]print sub6_end #af#[!+[]+!+[]+!+[]]#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]] sub7 = 3sub7_end = str(sub7) + str(7)print sub7_end #37#[!+[]+!+[]+!+[]]#[+!+[]]sub8 = 3sub8_end = str(sub8) + str(1)print sub8_end #31#(!![]+[])[!+[]+!+[]+!+[]]#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]sub9 = 1&lt;2sub9_end = str(sub9)[3] + str(7)print sub9_end #e7#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]#([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]sub10 = '[object Array Iterator]'sub10_end = str(8) + sub10[2]print sub10_end #8b#(![]+[])[+!+[]]#([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]sub11 = 1&gt;2sub11_end = str(sub11)[1] + '[object Array Iterator]'[5]print sub11_end #ac#(!![]+[])[!+[]+!+[]+!+[]]#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]sub12 = 1&lt;2sub12_end = str(sub12)[3] + str(7)print sub12_end #e7#(![]+[])[+!+[]]#([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]sub13 = 1&gt;2sub13_end = str(sub13)[1] + '[object Array Iterator]'[2]print sub13_end #ab#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]#([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]sub14 = '[object Array Iterator]'sub14_end = str(8) + str(sub14)[2]print sub14_end #8bprint '----------------------------------------'decodestr = sub1_end+sub2_end+sub3_end+sub4_end+sub5_end+sub6_end+sub7_end+sub8_end+sub9_end+sub10_end+sub11_end+sub12_end+sub13_end+sub14_endprint decodestrprint '========================================'no = binascii.a2b_hex(decodestr)print no 最后的执行结果 WTF ？？？？？ 这是有人在搞事情？","categories":[{"name":"渗透","slug":"渗透","permalink":"https://vxer-lee.github.io/categories/%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"Web渗透","slug":"Web渗透","permalink":"https://vxer-lee.github.io/tagsssss/Web%E6%B8%97%E9%80%8F/"}]},{"title":"湖湘杯 writeup","slug":"湖湘杯Writeup","date":"2020-01-06T03:59:36.000Z","updated":"2020-08-01T14:38:03.403Z","comments":true,"path":"湖湘杯Writeup.html","link":"","permalink":"https://vxer-lee.github.io/%E6%B9%96%E6%B9%98%E6%9D%AFWriteup.html","excerpt":"","text":"一、查壳UPX的壳很好脱，可以在网上找现成的脱壳工具、或者是手动用单步跟踪法、ESP定律法。 二、下断点 找到OEP然后下断(这里入口点感觉被修改过变异过 不像正常的vc++2015程序的入口点) 右键字符串智能搜索 找到关键字 input Your Flag 单步跟踪 三、分析1234567891001355386 52 push edx01355387 68 68A03501 push reverse.0135A068 ; fmcj2y~&#123;0135538C E8 16C0FFFF call reverse.013513A7; 比较最后输入的命令行参数是否为(fmcj2y~&#123;)01355391 83C4 08 add esp,0x8 ; 类似于c:\\tset\\reverse.exe fmcj2y~&#123;01355394 85C0 test eax,eax01355396 74 19 je Xreverse.013553B101355398 68 307E3501 push reverse.01357E30 ; Input Error!\\n0135539D E8 D8BFFFFF call reverse.0135137A013553A2 83C4 04 add esp,0x4013553A5 33C0 xor eax,eax 关键函数1 关键函数2 41A078地址的值为： 1234567891011121314151641A078[0] = 5041A078[1] = c641A078[2] = f141A078[3] = e441A078[4] = e341A078[5] = e241A078[6] = 9a41A078[7] = a141A078[8] = a741A078[9] = de41A078[10] = da41A078[11] = 4641A078[12] = ab41A078[13] = 2e41A078[14] = ff41A078[15] = db 最后将每个值减1得到flagflag{4fc5f0e3e2e199a0a6ddd945aa2dfeda}","categories":[{"name":"逆向","slug":"逆向","permalink":"https://vxer-lee.github.io/categories/%E9%80%86%E5%90%91/"}],"tags":[{"name":"PC逆向","slug":"PC逆向","permalink":"https://vxer-lee.github.io/tagsssss/PC%E9%80%86%E5%90%91/"}]},{"title":"你好博客","slug":"hello-blog","date":"2020-01-05T03:59:36.000Z","updated":"2020-08-01T14:21:24.530Z","comments":true,"path":"hello-blog.html","link":"","permalink":"https://vxer-lee.github.io/hello-blog.html","excerpt":"","text":"0x00:博客创建于 2020年01月05号 11:59分36秒，主要用于记录学习、经验积累、技术文档分享。专注逆向、网络安全 0x01:分类逆向(iOS、Android、Win、macOS、Linux)渗透（Web渗透、内网攻防开发 (Python、C++、iOS、JavaScript)漏洞（Pwn、IoT漏洞挖掘、二进制安全）","categories":[],"tags":[]}],"categories":[{"name":"逆向","slug":"逆向","permalink":"https://vxer-lee.github.io/categories/%E9%80%86%E5%90%91/"},{"name":"渗透","slug":"渗透","permalink":"https://vxer-lee.github.io/categories/%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"iOS逆向","slug":"iOS逆向","permalink":"https://vxer-lee.github.io/tagsssss/iOS%E9%80%86%E5%90%91/"},{"name":"Android逆向","slug":"Android逆向","permalink":"https://vxer-lee.github.io/tagsssss/Android%E9%80%86%E5%90%91/"},{"name":"内网攻防","slug":"内网攻防","permalink":"https://vxer-lee.github.io/tagsssss/%E5%86%85%E7%BD%91%E6%94%BB%E9%98%B2/"},{"name":"Web渗透","slug":"Web渗透","permalink":"https://vxer-lee.github.io/tagsssss/Web%E6%B8%97%E9%80%8F/"},{"name":"PC逆向","slug":"PC逆向","permalink":"https://vxer-lee.github.io/tagsssss/PC%E9%80%86%E5%90%91/"}]}