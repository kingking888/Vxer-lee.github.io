[{"title":"mimikatz破解Windows登陆密码","url":"/1.html"},{"title":"iOS应用逆向与安全-WhatsApp防撤回开发","url":"/iOS应用逆向与安全-WhatsApp分析.html","content":"\n>庆总的《iOS应用逆向与安全》看得也差不多了，根据最后一张，自己也分析下最新版本的WhatsApp软件的分析。\n>\n>版本：2.20.51\n\n## 盗墓准备：砸壳\n\n哈哈😸，最近可能鬼吹灯看多了，很喜欢吧逆向流程分为，盗墓准备-分经定穴-起尸开馆-盗墓。\n\n砸壳的方式现在真的五花八门，有各种工具来砸壳，其中比较好用有名的是用庆总用Frida框架写的`frida-ios-dump`，其下载地址为https://github.com/AloneMonkey/frida-ios-dump.\n\n还有Lakr Aream大佬写的VS Code插件`iOSre Extension`，该插件包含很多功能，可以列出所有APP，可以动态调试、可以一键脱壳、加载文件系统、下载上传文件。具体使用的话，在VS Code中直接安装该插件即可。其github地址为https://github.com/Co2333/iOSreExtension \n\n我个人的话比较喜欢`CrackXI`，是在手机上的越狱应用，在Cydia中添加蚂蚁源，安装CrackXI后打开I在其AppList界面点击需要砸壳的APP，然后点击YES,Full IPA开始砸壳，真的很简单好用。\n\n\n\n- frida-ios-dump https://github.com/AloneMonkey/frida-ios-dump 作者：庆总\n- iOSre Extension https://github.com/Co2333/iOSreExtension 作者：Lakr Aream\n- CrackerXI https://apt.cydia.love/misc 作者：蚂蚁源\n\n\n\n`导出头文件：`\n\n```bash\n#将WhatsApp程序的头文件导出到Headers文件中.\nclass-dump WhatsApp.app -A -H -o ./Headers\n```\n\n`还原符号表:`\n\n```bash\n#先在Github上下载restore-symbol\ngit clone --recursive https://github.com/tobefuturer/restore-symbol.git\ncd restore-symbol\nmake\n#然后链接到系统Bin，方便使用\ncd /usr/local/bin\nln /User/lee/restore-symbol/restore-symbol restore-symbol\n#拷贝可执行文件、瘦身、恢复符号表\ncd /User/lee/Desktop/whatsapp\ncp WhatsApp.app/whatsApp ./whatsApp_decrypt && chmod 777 whatsApp_decrypt\nlipo whatsApp_decrypt -thin arm64 -o whatsApp && chmod 777 whatsApp\nrestore-symbol WhatsApp -o WhatsApp_With_Symbol\n#然后替换WhatsApp.app里面的可执行文件,再用mobiledevice 安装\nmobiledevice WhatsApp.app\n```\n![截屏2020-06-29下午10.36.40](iOS%E5%BA%94%E7%94%A8%E9%80%86%E5%90%91%E4%B8%8E%E5%AE%89%E5%85%A8-WhatsApp%E5%88%86%E6%9E%90/%E6%88%AA%E5%B1%8F2020-06-29%E4%B8%8B%E5%8D%8810.36.40.png)\n.\n\n## 分金定穴：分析\n\n#### Reveal 查看UI层\n\n下载最新的Reveal，我这边目前最新的Reveal版本是26，然后配置下RevealServer，具体可以参考这一篇文章。\n\n[https://meilbn.com/2019/08/23/install-reveal2loader-on-jailbreak-device-ios12/#0x03_%E6%9B%B4%E6%96%B0_RevealServer-framework](https://meilbn.com/2019/08/23/install-reveal2loader-on-jailbreak-device-ios12/#0x03_更新_RevealServer-framework)\n\n启动WhatsApp并打开聊天对话框，然后用Reveal查看WhatsApp的消息控件，得知是WAMessaegContainerView类。\n![image-20200705213020250](iOS%E5%BA%94%E7%94%A8%E9%80%86%E5%90%91%E4%B8%8E%E5%AE%89%E5%85%A8-WhatsApp%E5%88%86%E6%9E%90/image-20200705213020250.png)\n\n#### VSCode 查找切入点\n\nVSCode打开用class-dump出来的WhatsApp头文件，搜索`WAMessageContainerView`头文件然后找到可疑的方法，由于我们是要做长按消息然后弹出框里面加收藏的功能，所以找到一个可疑的方法`handleLongPressAtPoint`,字面意思就是长按\n\n![image-20200705214346733](iOS%E5%BA%94%E7%94%A8%E9%80%86%E5%90%91%E4%B8%8E%E5%AE%89%E5%85%A8-WhatsApp%E5%88%86%E6%9E%90/image-20200705214346733.png)","tags":["iOS逆向"],"categories":["逆向"]},{"title":"iOS13 动态调试配置之debugserver","url":"/iOS13-动态调试配置之debugserver.html","content":"\n疫情期间家里没网🤣，好久没更新了，刚回到杭州给自己iOS逆向充充电。[武汉加油💪]\n\n---\n\niOS逆向里面比较重要的几项技能：动态调试、静态分析、HOOK关键函数、重签名\n\n先来讲下动态调试，iOS动态调试需要一个服务端和客户端程序，服务端程序在手机上监听要动态调试程序的进程ID或是程序名，客户端程序在Mac OS系统上运行。\n\n```python\n服务端程序:debugserver\n客户端程序:lldb\n#这两个程序不用额外的去外网下载，只要你的Mac电脑有装XCode，并且进行真机调试过（真机调试一般可以在淘宝买UDID开发者证书，就是和你手机UDID绑定的证书那么你就可以在你手机上安装开发你的APP|土豪（开发者账号））\n```\n\n只要你手机进行真机调试过，那么在你手机的这个目录下就会有debugserver\n\n```python\n/Developer/usr/bin/debugserver\n#不过这个debugserver 默认只能调试自己开发的APP，我们逆向当然是要逆别人的程序，所以想要debugserver能调试三方APP，需要进行一些修改，下面就是修改的一些重点。\n```\n\n### #0x00 配置debugserver 赋予权限\n\ndebugserver默认只能调试自己开发的应用，调试其他应用会抛异常`unable to start the exception thread`。默认的debugserver缺少`task_for_pid()`权限，因此需要给debugserver赋予task_for_pid权限。——这是网上摘抄的话\n\n我发现网上配置debugserver的方法已经过时，不适用iOS13系统，导致debugserver还是无法调试三方APP，所以按照如下方法进行。\n\n**1、 新建一个文件名为ent.xml**\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.backboardd.debugapplications</key>\n    <true/>\n    <key>com.apple.backboardd.launchapplications</key>\n    <true/>\n    <key>com.apple.diagnosticd.diagnostic</key>\n    <true/>\n    <key>com.apple.frontboard.debugapplications</key>\n    <true/>\n    <key>com.apple.frontboard.launchapplications</key>\n    <true/>\n    <key>com.apple.security.network.client</key>\n    <true/>\n    <key>com.apple.security.network.server</key>\n    <true/>\n    <key>com.apple.springboard.debugapplications</key>\n    <true/>\n    <key>com.apple.system-task-ports</key>\n    <true/>\n    <key>get-task-allow</key>\n    <true/>\n    <key>platform-application</key>\n    <true/>\n    <key>run-unsigned-code</key>\n    <true/>\n    <key>task_for_pid-allow</key>\n    <true/>\n</dict>\n</plist>\n```\n\n\n\n**2、用ldid对debugserver签名 赋予权限**\n\n```bash\nldid -Sxml全路径 debugserver全路径`\n例如：`ldid -Sent.xml debugserver\n```\n\n这里要SSH连入iPhone手机执行命令：需要越狱您的iPhone,不会的请去看 [疯先生越狱](https://mrmad.com.tw/category/jb/jailbreak)\n\n```bash\n#开启端口转发,数据线连SSH\niproxy 2222 44        #默认用Checkra1n越狱的端口号为44，其余的默认为22\n#连入iPhone SSH\nssh root@localhost -p 2222 #iPhone默认ssh密码,alpine\n\n#切换到debugserver存在的目录\niPhone:~ root# cd /Developer/usr/bin/\niPhone:/Developer/usr/bin root# ls\nDTDeviceArbitration*  ScreenShotr*  axauditd*  debugserver*\n\n#新建ent.xml文件\niPhone:/Developer/usr/bin root# vim ent.xml   #将1、里面的ent.xml内容复制进去，并且保存\n\n#最后ldid赋予权限\niPhone:/Developer/usr/bin root# ldid -Sent.xml debugserver\n\n#拷贝到系统目录\niPhone:/Developer/usr/bin root# copy ./debugserver /usr/bin\n```\n\n![截屏2020-02-06下午7.52.51](iOS13-动态调试配置之debugserver/截屏2020-02-06下午7.52.51.png)\n\n\n\n### #0x01 验证debugserver 进行动态调试\n\n配置好iPhone端的debugserver后，就可以在Mac电脑上用lldb远程进行动态调试了**lldb调试大全后续会讲**，此次注重debugserver的配置，lldb一笔带，只要知道lldb是Mac上的客户端用来动态调试。\n\n以调试Sugram 聊天软件为例\n\n手机端：\n\n```bash\n#查看Sugram的进程ID\niPhone:~ root# ps aux|grep \"Sugram\"\nmobile          6542   0.0  2.9  5055392  59136   ??  Ss    8:38PM   0:00.51 /var/containers/Bundle/Application/12CA134A-E92A-4F35-BEAA-542F84A0A39F/Sugram.app/Sugram\n\n#注入方式对Sugram进行监听\niPhone:~ root# debugserver 127.0.0.1:1234 --attach 6542\n```\n\n这时候被注入监听的那个APP就会进入卡死状态，因为debugserver已经对Sugram进行调试状态。\n\n电脑端：\n\n```bash\n#先用iProxy 转发debugserver监听的端口\niproxy 1234 1234\n#进入lldb 进行远程调试\nlldb\n(lldb) process connect connect://localhost:1234\n```\n\n\n\n### #0x02 成功！\n\n出现如下画面说明debugserver 配置正确，lldb也可以进行动态调试了。😁😁  --专注逆向、网络安全 Lee\n\n![截屏2020-02-06下午8.48.39](iOS13-动态调试配置之debugserver/截屏2020-02-06下午8.48.39.png)","tags":["iOS逆向"],"categories":["逆向"]},{"title":"拼多多数据库解密","url":"/拼多多数据库解密.html","content":"\n\n\n## 0x00 拼多多数据库\n\n在拼多多数据库中其中的`t_mall_conversation`表中的`message`字段数据内容被加密了\n\n![image-20200119142603548](%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/image-20200119142603548.png)\n\n提取相应的关键字：\n\n>t_mall_conversation\n>\n>message\n\n\n\n## 0x01 逆向分析\n\n在其官网找到下载地址\n\n```\nhttp://mcdn.yangkeduo.com/android_dev/2020-01-14/b9af6563fb99283df18cbdedddef1e68.apk\n```\n\n#### 查壳\n\n先用Android APK查壳工具，对拼多多APK进行查壳。如果有被加固需要进行下一步的脱壳操作，如下图：拼多多APK并未被加固。\n\n![image-20200119142907538](%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/image-20200119142907538.png)\n\n#### 反编译、关键字定位\n\n根据关键字`t_mall_conversation`定位到处理该表与`message`加密字段的类。\n\n![image-20200119151434228](%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/image-20200119151434228.png)\n\n在该类下继续找到`getMessage` 与 `setMessage`方法，其中getMessage为获取Pdd数据库t_mall_conversation表中Message的字段（所以解密函数也在该方法中），而setMessage为相反的设置Message字段的内容（加密函数在该方法中）。\n\n\n![image-20200119151637311](%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/image-20200119151637311.png)\n\n```java\na.b(message) //解密函数\na.a(str)     //加密函数\n```\n\n\n\n#### 反编译、加密算法解析\n\n采用AES加密算法，向量为{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}，密钥为用户UID的MD5加密取前16位，UID的值在`data/data/com.xunmeng.pinduoduo/files/pinUserFile`文件中。\n\n```java\nIV = new byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n\nuid = 5564948642776;\nMD5(uid) = 479EE2A088591D9856CCDC451C1B4515;\nKEY = 479EE2A088591D98;\n```\n\n\n\nAES加密算法\n\n![image-20200119153147712](%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/image-20200119153147712.png)\n\nUID值\n\n![image-20200119154305302](%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/image-20200119154305302.png)\n\n![image-20200119154332523](%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/image-20200119154332523.png)\n\n#### POC 编写、破解过程验证\n\n```java\nimport android.util.Base64;\nimport java.security.Key;\nimport javax.crypto.Cipher;\n\n\n//解密函数\n public  String PddMsgDecrypt(String msg) {\n        if (TextUtils.isEmpty(msg)) {\n            return msg;\n        }\n        //MD5加密(uid)\n        String md5Text = MD5Utils.digest(\"5564948642776\");\n        if (TextUtils.isEmpty(md5Text)) {\n            return msg;\n        }\n\n        //IV\n        byte[] iv = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        //KEY 取MD5前16位\n        byte[] key = md5Text.substring(0,16).getBytes();\n\n        //AES解密\n        try{\n            SecretKeySpec v1 = new SecretKeySpec(key, \"AES\");\n            IvParameterSpec v0_2 = new IvParameterSpec(iv);\n            Cipher v2 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n            v2.init(2, ((Key)v1), ((AlgorithmParameterSpec)v0_2));\n            return new String(v2.doFinal(Base64.decode(msg, 2)));\n        }\n        catch(Throwable unstd) {\n            Log.v(\"Lee\", \"Fail to decrypt data with aes key through java\");\n            return msg;\n        }\n     \n//POC 破解过程验证\nPddMsgDecrypt(\"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\");\n```\n\n\n\n\n\n#### 验证成功、成功解密\n\n![image-20200119155717365](%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E5%AF%86/image-20200119155717365.png)\n\n```\n{\"auto_click\":1,\"content\":\"亲，欢迎来到拼多多，今后您在拼多多遇到的任何问题都可以咨询我哦～快快开启“多实惠，多乐趣”的购物之旅吧！\",\"from\":{\"mall_id\":\"606\",\"role\":\"mall_cs\",\"uid\":\"606\"},\"is_aut\":0,\"is_rich_text\":1,\"mallName\":\"拼多多官方客服\",\"msg_id\":\"1579261690080\",\"rich_text\":{\"content\":[{\"text\":\"亲，欢迎来到拼多多，今后您在拼多多遇到的任何问题都可以咨询我哦～快快开启“多实惠，多乐趣”的购物之旅吧！\",\"type\":\"text\"},{\"click_action\":{\"name\":\"send_message\",\"params\":{\"content\":\"如何搜索商品\"}},\"hide\":0,\"text\":\"如何搜索商品\",\"type\":\"menu_item\"},{\"click_action\":{\"name\":\"send_message\",\"params\":{\"content\":\"怎么在拼多多下单\"}},\"hide\":0,\"text\":\"怎么在拼多多下单\",\"type\":\"menu_item\"},{\"click_action\":{\"name\":\"send_message\",\"params\":{\"content\":\"下单后如何支付\"}},\"hide\":0,\"text\":\"下单后如何支付\",\"type\":\"menu_item\"},{\"click_action\":{\"name\":\"send_message\",\"params\":{\"content\":\"哪里可以看到我的订单\"}},\"hide\":0,\"text\":\"哪里可以看到我的订单\",\"type\":\"menu_item\"},{\"click_action\":{\"name\":\"send_message\",\"params\":{\"content\":\"拼多多有哪些活动\"}},\"hide\":0,\"text\":\"拼多多有哪些活动\",\"type\":\"menu_item\"}],\"template\":\"text_with_menu_items\",\"version\":1},\"status\":\"unread\",\"template_name\":\"parrot_rich_text_with_menu_item\",\"to\":{\"role\":\"user\",\"uid\":\"5564948642776\"},\"ts\":\"1579261690\",\"type\":0,\"unread_count\":1,\"user_has_read\":true}\n```\n\n","tags":["Android逆向"],"categories":["逆向"]},{"title":"Mimikatz破解Windows登陆密码","url":"/mimikatz破解Windows登陆密码.html","content":"\n## 使用场景\n\n已获取system权限，无法在目标机器上上传Mimikatz(有杀软或者限制啥的)，这个时候可以通过reg命令导出SAM和SYSTEM文件，离线读取出NTML HASH，其实也可以用procdump64和mimikatz抓取Windows用户密码，这个小技巧算是另外一种方式吧\n\n## 利用方式\n\n首先导出两个文件，可能需要管理员权限 ，CMD或者Powershell运行都可以。\n\n```bash\nreg save hklm\\sam sam.hive\nreg save hklm\\system system.hive\n```\n\n![img](mimikatz破解Windows登陆密码/1.png)\n\n\n然后将这两个hive文件放到和Mimikatz同一个目录下，你可将目标机器的这两个文件拖出来到自己机器上尝试\n\nmimikatz下载链接：https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20200809\n\n![img](mimikatz破解Windows登陆密码/2.png)\n.\n\n运行mimikatz，输入命令\n\n```powershell\nlsadump::sam /sam:sam.hive /system:system.hive\n```\n![img](mimikatz破解Windows登陆密码/ntlm.png)\n获取NTML后，我们对其进行解密，就随便找个稍微好用的解密网站就行，这里用cmd5进行解密\n![img](mimikatz破解Windows登陆密码/123456.png)\n.\n\n","tags":["内网攻防"],"categories":["渗透"]},{"title":"熬夜之干JS加密","url":"/熬夜之干JS加密.html","content":"\n朋友发了这么一段东西，然后和我说熬夜也要把它解出来  我：？？？？？？？？\n\n没错经过一番搜索后发现这是一段加密的JS代码。\n\n(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[+[]]+[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]]+[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]+(![]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]\n\n\n\n这是一段Js代码，利用js引擎语法 运算符 优先级等特性，让代码看起来特别难懂复杂。\n\n> 首先要运用到的第一个知识就是js运算符的优先级，因为这么长一段运算看的人眼花，我们必须得先根据优先级分成n小段，然后再各个击破。优先级的排列如下表：\n\n　　\n\n\n\n#### 优先级从高到低：\n\n| 运算符                             | 说明                                                   |\n| ---------------------------------- | ------------------------------------------------------ |\n| .[ ] ( )                           | 字段访问、数组索引、函数调用和表达式分组               |\n| ++ -- - ~ ! delete new typeof void | 一元运算符、返回数据类型、对象创建、未定义的值         |\n| * / %                              | 相乘、相除、求余数                                     |\n| + - +                              | 相加、相减、字符串串联                                 |\n| << >> >>>                          | 移位                                                   |\n| < <= > >= instanceof               | 小于、小于或等于、大于、大于或等于、是否为特定类的实例 |\n| == != === !==                      | 相等、不相等、全等，不全等                             |\n| &                                  | 按位“与”                                               |\n| ^                                  | 按位“异或”                                             |\n| \\|                                 | 按位“或”                                               |\n| &&                                 | 逻辑“与”                                               |\n| \\|\\|                               | 逻辑“或”                                               |\n| ?:                                 | 条件运算                                               |\n| = *OP*=                            | 赋值、赋值运算（如 += 和 &=）                          |\n| ,                                  | 多个计算                                               |\n\n\n\n#### 代码拆分\n\n根据（）和[] 代码一共可以拆分成28段。\n\n其实这28段代表的就是 e9a699e6b8af3731e78bace7ab8b 个字节\n\n\n\n#### 举例第一段:\n\n(!![]+[])[!+[]+!+[]+!+[]]        把() 和 []分开来就是\n\n(!![]+[]).       等于  true\n\n[!+[]+!+[]+!+[]]   等于 3 \n\n然后合起来就是\"true\"[3] 意思就是 取\"true\"这个字符串 从0开始到第3个字符, 也就是e\n\n\n\n![image-20190803024505492](assets/image-20190803024505492.png)\n\n![image-20190803024531220](assets/image-20190803024531220.png)\n\n\n\n#### 举例第二段：\n\n第二段则是 !+[] 代表1    一共是 9个1相加\n\n!+[]    !+[]    !+[]   !+[]   !+[]   !+[]   !+[]   !+[]   !+[]  \n\n![image-20190803024927010](assets/image-20190803024927010.png)\n\n\n\n**所以第一段和第二段加起来就是e9,也就是那段e9a699e6b8af3731e78bace7ab8b 前两个字**\n\n\n\n**后面的段以此类推**\n\n```javascript\n//第一段\n(!![]+[])[!+[]+!+[]+!+[]]  \n+\n//第二段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]] \n+\n//第三段\n(![]+[])[+!+[]]\n+\n//第四段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第五段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第六段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第七段\n(!![]+[])[!+[]+!+[]+!+[]]\n+\n//第八段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第九段\n([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]\n+\n//第十段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第十一段\n(![]+[])[+!+[]]\n+\n//第十二段\n(![]+[])[+[]]\n+\n//第十三段\n[!+[]+!+[]+!+[]]\n+\n//第十四段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第十五段\n[!+[]+!+[]+!+[]]\n+\n//第十六段\n[+!+[]]\n+\n//第十七段\n(!![]+[])[!+[]+!+[]+!+[]]\n+\n//第十八段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第十九段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第二十段\n([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]\n+\n//第二十一段\n(![]+[])[+!+[]]\n+\n//第二十二段\n([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]\n+\n//第二十三段\n(!![]+[])[!+[]+!+[]+!+[]]\n+\n//第二十四段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第二十五段\n(![]+[])[+!+[]]\n+\n//第二十六段\n([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]\n+\n//第二十七段\n[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n+\n//第二十八段\n([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]\n\n\n```\n\n\n\n**python拟代码**\n\n```python\n#coding=utf8\nimport binascii\nimport sys\nreload(sys)\n\n#e9a699e6b8af3731e78bace7ab8b\n\n#(!![]+[])[!+[]+!+[]+!+[]]\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\nsub1 = 1<2\nsub1_end = str(sub1)[3] + str(9)\nprint sub1_end            #e9\n\n#(![]+[])[+!+[]]\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\nsub2 = 1>2\nsub2_end = str(sub2)[1] + str(6)\nprint sub2_end            #a6\n\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\nsub3 = 9\nsub3_end = str(sub3) + str(sub3)\nprint sub3_end           #99\n\n#(!![]+[])[!+[]+!+[]+!+[]]\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\nsub4 = 1<2\nsub4_end = str(sub4)[3] + str(6)\nprint sub4_end           #e6\n\n#([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\nsub5 = '[object Array Iterator]'\nsub5_end = sub5[2] + str(8)\nprint sub5_end           #b8\n\n#(![]+[])[+!+[]]\n#(![]+[])[+[]]\nsub6 = 1>2\nsub6_end = str(sub6)[1] + str(sub6).lower()[0]\nprint sub6_end           #af\n\n#[!+[]+!+[]+!+[]]\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]                \nsub7 = 3\nsub7_end = str(sub7) + str(7)\nprint sub7_end           #37\n\n#[!+[]+!+[]+!+[]]\n#[+!+[]]\nsub8 = 3\nsub8_end = str(sub8) + str(1)\nprint sub8_end           #31\n\n#(!![]+[])[!+[]+!+[]+!+[]]\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\nsub9 = 1<2\nsub9_end = str(sub9)[3] + str(7)\nprint sub9_end           #e7\n\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n#([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]\nsub10 = '[object Array Iterator]'\nsub10_end = str(8) + sub10[2]\nprint sub10_end          #8b\n\n#(![]+[])[+!+[]]\n#([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]\nsub11 = 1>2\nsub11_end = str(sub11)[1] + '[object Array Iterator]'[5]\nprint sub11_end          #ac\n\n#(!![]+[])[!+[]+!+[]+!+[]]\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\nsub12 = 1<2\nsub12_end = str(sub12)[3] + str(7)\nprint sub12_end          #e7\n\n#(![]+[])[+!+[]]\n#([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]\nsub13 = 1>2\nsub13_end = str(sub13)[1] + '[object Array Iterator]'[2]\nprint sub13_end          #ab\n\n#[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]\n#([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]]\nsub14 = '[object Array Iterator]'\nsub14_end = str(8) + str(sub14)[2]\nprint sub14_end         #8b\n\nprint '----------------------------------------'\ndecodestr = sub1_end+sub2_end+sub3_end+sub4_end+sub5_end+sub6_end+sub7_end+sub8_end+sub9_end+sub10_end+sub11_end+sub12_end+sub13_end+sub14_end\nprint decodestr\nprint '========================================'\nno = binascii.a2b_hex(decodestr)\n\nprint no\n```\n\n\n\n最后的执行结果\n\nWTF ？？？？？ 这是有人在搞事情？\n\n![ssdd](熬夜之干JS加密/ssdd.png)\n\n\n\n\n\n\n","tags":["Web渗透"],"categories":["渗透"]},{"title":"湖湘杯 writeup","url":"/湖湘杯Writeup.html","content":"\n\n## 一、查壳\n\nUPX的壳很好脱，可以在网上找现成的脱壳工具、或者是手动用单步跟踪法、ESP定律法。\n\n<img src=\"湖湘杯Writeup/截屏2019-11-09下午9.45.21.png\" alt=\"截屏2019-11-09下午9.45.21\" style=\"zoom:40%;\" />\n\n\n\n## 二、下断点 \n\n1. 找到OEP然后下断(这里入口点感觉被修改过变异过 不像正常的vc++2015程序的入口点)\n2. 右键字符串智能搜索\n3. 找到关键字 input Your Flag 单步跟踪\n\n![截屏2019-11-09下午10.26.46](湖湘杯Writeup/截屏2019-11-09下午10.26.46.png) \n\n![截屏2019-11-09下午10.26.46](湖湘杯Writeup/截屏2019-11-09下午10.29.31.png) \n\n\n\n## 三、分析\n\n```assembly\n01355386    52              push edx\n01355387    68 68A03501     push reverse.0135A068                    ; fmcj2y~{\n0135538C    E8 16C0FFFF     call reverse.013513A7;    比较最后输入的命令行参数是否为(fmcj2y~{)\n01355391    83C4 08         add esp,0x8          ;    类似于c:\\tset\\reverse.exe fmcj2y~{\n01355394    85C0            test eax,eax\n01355396    74 19           je Xreverse.013553B1\n01355398    68 307E3501     push reverse.01357E30                    ; Input Error!\\n\n0135539D    E8 D8BFFFFF     call reverse.0135137A\n013553A2    83C4 04         add esp,0x4\n013553A5    33C0            xor eax,eax\n```\n\n![111](湖湘杯Writeup/111.png)\n\n\n\n### 关键函数1\n\n![截屏2019-11-09下午10.55.47](湖湘杯Writeup/截屏2019-11-09下午10.55.47.png)\n\n### 关键函数2\n\n![截屏2019-11-09下午11.01.54](湖湘杯Writeup/截屏2019-11-09下午11.01.54.png)\n\n\n\n![截屏2019-11-09下午11.00.05](湖湘杯Writeup/截屏2019-11-09下午11.00.05.png)\n\n41A078地址的值为：\n\n```c++\n41A078[0] = 50\n41A078[1] = c6\n41A078[2] = f1\n41A078[3] = e4\n41A078[4] = e3\n41A078[5] = e2\n41A078[6] = 9a\n41A078[7] = a1\n41A078[8] = a7\n41A078[9] = de\n41A078[10] = da\n41A078[11] = 46\n41A078[12] = ab\n41A078[13] = 2e\n41A078[14] = ff\n41A078[15] = db\n```\n\n\n\n最后将每个值减1\n得到flag\n`flag{4fc5f0e3e2e199a0a6ddd945aa2dfeda}`\n\n----\n\n![截屏2019-11-09下午11.18.50](湖湘杯Writeup/截屏2019-11-09下午11.18.50.png)\n\n","tags":["PC逆向"],"categories":["逆向"]},{"title":"你好博客","url":"/hello-blog.html","content":"## 0x00:\n博客创建于 2020年01月05号 11:59分36秒，主要用于记录学习、经验积累、技术文档分享。\n专注逆向、网络安全\n\n# 0x01:分类\n逆向(iOS、Android、Win、macOS、Linux)\n渗透（Web渗透、内网攻防\n开发 (Python、C++、iOS、JavaScript)\n漏洞（Pwn、IoT漏洞挖掘、二进制安全）\n\n![壁纸1](hello-blog/bg1.jpg)\n\n![壁纸1](hello-blog/bg2.jpg)\n\n![壁纸1](hello-blog/bg3.jpg)\n\n\n\n"}]